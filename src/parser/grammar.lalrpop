use lalrpop_util::ParseError;
use std::cell::Cell;
use super::ast::{self, Spanned, Expr, ExprKind, Type, Stmt, Defn, DeclInfo, Operator::{self, *}, BinOpKind, PrefixOpKind, Field};
use super::result;
use crate::util::{FileId, Span};
use bumpalo::Bump;

grammar<'b>(bump: &'b Bump, file_id: FileId);

extern {
    type Error = result::ParseError;
}

match {
    r"\s*" => { }, // The default whitespace skipping is disabled an `ignore pattern` is specified
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { },  // Skip `/* comments */`
    _,
}

pub Program: Vec<Defn<'b>> = {
    Defn*,
};

ExprWithBlock: Expr<'b> = {
    BlockExpr,
    <@L> "if" <CondExpr> <BlockExpr> <("else" "if" <CondExpr> <BlockExpr>)*> <("else" <BlockExpr>)?> <@R> =>
        ast::make_if_expr(bump, file_id, <>),
};

ExprConfig<Cfg> = ExprConfig16<Cfg>;
Expr = ExprConfig<"BS">;
CondExpr = ExprConfig<"">;
ExprWithoutBlock = ExprConfig<"S">;

AtomicExpr: Expr<'b> = {
    <l:@L> "(" <e:Expr> ")" <r:@R> => {
        Expr {
            kind: ExprKind::Group(bump.alloc(e)),
            span: Span::new(file_id, l, r),
            ty: Cell::new(None),
        }
    },
    BoolExpr,
    Spanned<Id> => ast::make_lit_expr(bump, file_id, |s| ExprKind::Id(s, Cell::new(None), Cell::new(false)), <>),
    Spanned<Int> => ast::make_lit_expr(bump, file_id, |s| ExprKind::Int(s), <>),
    Spanned<Float> => ast::make_lit_expr(bump, file_id, |s| ExprKind::Float(s), <>),
    Spanned<Char> => ast::make_lit_expr(bump, file_id, |s| ExprKind::Char(s), <>),
    Spanned<Str> => ast::make_lit_expr(bump, file_id, |s| ExprKind::Str(s), <>),
    TupleExpr,
    ArrayExpr,
};

ExprConfig1<Cfg>: Expr<'b> = {
    AtomicExpr,
    StructExpr if Cfg ~~ "S",
    ExprWithBlock if Cfg ~~ "B",
};

ExprConfig2<Cfg>: Expr<'b> = {
    ExprConfig1<Cfg>,
    ExprConfig2<Cfg> Spanned<"."> FieldExpr => ast::make_field_expr(bump, file_id, <>),
};

ExprConfig3<Cfg>: Expr<'b> = {
    ExprConfig2<Cfg>,
    <ExprConfig3<Cfg>> "(" <Delimited<Expr, ",">> ")" <@R> => ast::make_call_expr(bump, file_id, <>),
    <ExprConfig3<Cfg>> "[" <Expr> "]" <@R> => ast::make_index_expr(bump, file_id, <>),
};

ExprConfig4<Cfg>: Expr<'b> = {
    ExprConfig3<Cfg>,
    Spanned<UnaryOp> ExprConfig4<Cfg> => ast::make_prefix_op_expr(bump, file_id, <>),
};

ExprConfig5<Cfg>: Expr<'b> = {
    ExprConfig4<Cfg>,
    ExprConfig5<Cfg> Spanned<"as"> Type => ast::make_cast_expr(bump, file_id, <>),
};

ExprConfig6<Cfg>: Expr<'b> = {
    ExprConfig5<Cfg>,
    ExprConfig6<Cfg> Spanned<MulOp> ExprConfig5<Cfg> => ast::make_binop_expr(bump, file_id, <>),
};

ExprConfig7<Cfg>: Expr<'b> = {
    ExprConfig6<Cfg>,
    ExprConfig7<Cfg> Spanned<AddOp> ExprConfig6<Cfg> => ast::make_binop_expr(bump, file_id, <>),
};

ExprConfig8<Cfg>: Expr<'b> = {
    ExprConfig7<Cfg>,
    ExprConfig8<Cfg> Spanned<ShiftOp> ExprConfig7<Cfg> => ast::make_binop_expr(bump, file_id, <>),
};

ExprConfig9<Cfg>: Expr<'b> = {
    ExprConfig8<Cfg>,
    ExprConfig9<Cfg> Spanned<BitAndOp> ExprConfig8<Cfg> => ast::make_binop_expr(bump, file_id, <>),
};

ExprConfig10<Cfg>: Expr<'b> = {
    ExprConfig9<Cfg>,
    ExprConfig10<Cfg> Spanned<BitXorOp> ExprConfig9<Cfg> => ast::make_binop_expr(bump, file_id, <>),
};

ExprConfig11<Cfg>: Expr<'b> = {
    ExprConfig10<Cfg>,
    ExprConfig11<Cfg> Spanned<BitOrOp> ExprConfig10<Cfg> => ast::make_binop_expr(bump, file_id, <>),
};

ExprConfig12<Cfg>: Expr<'b> = {
    ExprConfig11<Cfg>,
    ExprConfig11<Cfg> Spanned<ComparisonOp> ExprConfig11<Cfg> => ast::make_binop_expr(bump, file_id, <>),
};

ExprConfig13<Cfg>: Expr<'b> = {
    ExprConfig12<Cfg>,
    ExprConfig13<Cfg> Spanned<AndOp> ExprConfig12<Cfg> => ast::make_binop_expr(bump, file_id, <>),
};

ExprConfig14<Cfg>: Expr<'b> = {
    ExprConfig13<Cfg>,
    ExprConfig14<Cfg> Spanned<OrOp> ExprConfig13<Cfg> => ast::make_binop_expr(bump, file_id, <>),
};

ExprConfig15<Cfg>: Expr<'b> = {
    ExprConfig14<Cfg>,
    <l:ExprConfig14<Cfg>> <op:Spanned<RangeOp>> <r:ExprConfig14<Cfg>> => ast::make_range_expr(bump, file_id, op, Some(l), Some(r)),
    <op:Spanned<RangeOp>> <r:ExprConfig14<Cfg>> => ast::make_range_expr(bump, file_id, op, None, Some(r)),
    <l:ExprConfig14<Cfg>> <op:Spanned<RangeOp>> => ast::make_range_expr(bump, file_id, op, Some(l), None),
    <op:Spanned<RangeOp>> => ast::make_range_expr(bump, file_id, op, None, None),
};

ExprConfig16<Cfg>: Expr<'b> = {
    ExprConfig15<Cfg>,
    ExprConfig15<Cfg> Spanned<AssignOp> ExprConfig16<Cfg> => ast::make_binop_expr(bump, file_id, <>),
    ExprConfig15<Cfg> Spanned<AssignOp> ExprWithBlock if Cfg !~ "B" => ast::make_binop_expr(bump, file_id, <>),
};

BoolExpr: Expr<'b> = {
    <@L> "true" <@R> => ast::make_spanned_expr(file_id, ExprKind::Bool(true), <>),
    <@L> "false" <@R> => ast::make_spanned_expr(file_id, ExprKind::Bool(false), <>),
};
TupleExpr: Expr<'b> = <@L> "(" <TupleDelimited<Expr, ",">> ")" <@R> => ast::make_tuple_expr(bump, file_id, <>);
ArrayExpr: Expr<'b> = <@L> "[" <Delimited<Expr, ",">> <(";" <Spanned<Int>>)?> "]" <@R> =>? ast::make_array_expr(bump, file_id, <>)
    .map_err(|error| ParseError::User { error });
BlockExpr: Expr<'b> = <@L> "{" <Stmts?> "}" <@R> => ast::make_block_expr(bump, file_id, <>);
StructExpr: Expr<'b> = <@L> <Spanned<Id>> "{" <Delimited<StructExprField, ",">> "}" <@R> => ast::make_struct_expr(bump, file_id, <>);
StructExprField: (Spanned<&'b str>, Expr<'b>) = <id:Spanned<Id>> ":" <e:Expr> => (id.map(|id| &*bump.alloc_str(id)), e);

Stmts: Vec<Stmt<'b>> = {
    Stmt+,
    <mut stmts:Stmt+> <expr:ExprWithoutBlock> => {
        let stmt = ast::make_expr_stmt(bump, file_id, false, expr);
        stmts.push(stmt);
        stmts
    },
    ExprWithoutBlock => vec![ast::make_expr_stmt(bump, file_id, false, <>)],
};

Stmt = {
    LetStmt,
    ExprStmt,
};

LetStmt: Stmt<'b> = {
    <@L> "let" <LetDeclInfo> "=" <Expr> ";" <@R> => ast::make_let_stmt(bump, file_id, <>),
};

ExprStmt: Stmt<'b> = {
    <ExprWithoutBlock> ";" => ast::make_expr_stmt(bump, file_id, true, <>),
    <expr:ExprWithBlock> <semi:";"?> => ast::make_expr_stmt(bump, file_id, semi.is_some(), expr),
};

Type: Type<'b> = {
    <id: Spanned<Id>> => ast::make_id_type(bump, file_id, <>),
    <@L> "*" <"mut"?> <Type> => ast::make_pointer_type(bump, file_id, <>),
    <@L> "[" <Type> "]" <@R> => ast::make_slice_type(bump, file_id, <>),
    <@L> "[" <Type> ";" <Spanned<Int>> "]" <@R> =>? ast::make_array_type(bump, file_id, <>)
        .map_err(|error| ParseError::User { error }),
    <@L> "(" <TupleDelimited<Type, ",">> ")" <@R> => ast::make_tuple_type(bump, file_id, <>),
    <@L> "fn" "(" <Delimited<Type, ",">> ")" <("->" <Type>)?> <@R> => ast::make_fn_type(bump, file_id, <>),
};

Defn: Defn<'b> = {
    <@L> "fn" <Spanned<Id>> "(" <Delimited<DeclInfo, ",">> ")" <("->" <Type>)?> <BlockExpr> <@R> => ast::make_fn_defn(bump, file_id, <>),
    <@L> "static" <LetDeclInfo> "=" <Expr> ";" <@R> => ast::make_static_defn(bump, file_id, <>),
    StructDefn,
};

StructDefn: Defn<'b> = {
    <@L> "struct" <Spanned<Id>> "{" <Delimited<DeclInfo, ",">> "}" <@R> => ast::make_struct_defn(bump, file_id, <>),
    //<l:@L> "struct" <id:Spanned<Id>> ";" <r:@R> => ast::make_struct_defn(bump, file_id, l, id, vec![], r),
};

DeclInfo: DeclInfo<'b> = {
    <l:@L> <m:Spanned<"mut">?> <name:Spanned<Id>> ":" <ty_ast:Type> <r:@R> => {
        let name = name.map(|name| &*bump.alloc_str(name));
        DeclInfo {
            mutable: m.is_some(),
            name,
            ty: Cell::new(None),
            ty_ast: Some(ty_ast),
            span: Span::new(file_id, l, r),
            id: Cell::new(None),
        }
    },
};

LetDeclInfo: DeclInfo<'b> = {
    <l:@L> <m:"mut"?> <name:Spanned<Id>> <ty_ast:(":" <Type>)?> <r:@R> => {
        let name = name.map(|name| &*bump.alloc_str(name));
        DeclInfo {
            mutable: m.is_some(),
            name,
            ty: Cell::new(None),
            ty_ast,
            span: Span::new(file_id, l, r),
            id: Cell::new(None),
        }
    },
};

UnaryOp: PrefixOpKind = {
    "-" => PrefixOpKind::Minus,
    "&" => PrefixOpKind::Amp,
    "&" "mut" => PrefixOpKind::AmpMut,
    "*" => PrefixOpKind::Star,
    "!" => PrefixOpKind::Bang,
    "~" => PrefixOpKind::Tilde,
};

MulOp: Operator = {
    "*" => Simple(BinOpKind::Star),
    "/" => Simple(BinOpKind::Slash),
    "%" => Simple(BinOpKind::Percent),
};

AddOp: Operator = {
    "+" => Simple(BinOpKind::Plus),
    "-" => Simple(BinOpKind::Minus),
};

ShiftOp: Operator = {
    "<<" => Simple(BinOpKind::LtLt),
    ">>" => Simple(BinOpKind::GtGt),
};

BitAndOp: Operator = {
    "&" => Simple(BinOpKind::Amp),
};

BitXorOp: Operator = {
    "^" => Simple(BinOpKind::Caret),
};

BitOrOp: Operator = {
    "|" => Simple(BinOpKind::Pipe),
};

ComparisonOp: Operator = {
    "==" => Simple(BinOpKind::EqEq),
    "!=" => Simple(BinOpKind::Ne),
    "<" => Simple(BinOpKind::Lt),
    ">" => Simple(BinOpKind::Gt),
    "<=" => Simple(BinOpKind::Le),
    ">=" => Simple(BinOpKind::Ge),
};

AndOp: Operator = {
    "&&" => Simple(BinOpKind::AmpAmp),
};

OrOp: Operator = {
    "||" => Simple(BinOpKind::PipePipe),
};

RangeOp: &'input str = {
    ".." => <>,
};

AssignOp: Operator = {
    "=" => Assign(None),
    "+=" => Assign(Some(BinOpKind::Plus)),
    "-=" => Assign(Some(BinOpKind::Minus)),
    "*=" => Assign(Some(BinOpKind::Star)),
    "/=" => Assign(Some(BinOpKind::Slash)),
    "%=" => Assign(Some(BinOpKind::Percent)),
    "&=" => Assign(Some(BinOpKind::Amp)),
    "|=" => Assign(Some(BinOpKind::Pipe)),
    "^=" => Assign(Some(BinOpKind::Caret)),
    "<<=" => Assign(Some(BinOpKind::LtLt)),
    ">>=" => Assign(Some(BinOpKind::GtGt)),
};

FieldExpr: Spanned<Field<'b>> = {
    Spanned<Id> => <>.map(|id| Field::Name(bump.alloc_str(id), Cell::new(None))),
    Spanned<Int> => <>.map(|id| Field::Index(bump.alloc_str(id))),
}

Spanned<T>: Spanned<T> = {
    <l:@L> <t:T> <r:@R> => Spanned(Span::new(file_id, l, r), t),
};

TupleDelimited<T, Delim>: Vec<T> = {
    () => vec![],
    <e:T> "," <mut es:Delimited<T, ",">> => {
        es.insert(0, e);
        es
    },
};

Delimited<T, Delim>: Vec<T> = {
    <mut v:(<T> Delim)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Char = {
    r"'\\?[^']'",
    Spanned<"''"> =>?
        Err(ParseError::User { error: result::ParseError::EmptyChar {
            span: <>.span(),
        }}),
};
Str = r#""(\.|[^"])*""#;
Id = r"[A-Za-z_$][A-Za-z0-9_]*";
Int = {
    UInt,
    r"-[1-9]\d*",
}
UInt = r"0|[1-9]\d*";
Float = r"[+-]?\d+\.\d+";